variable_2_anexa_para_seleccionar_cluster_3=variable_1_anexa_para_seleccionar_cluster_3/contador_anexa_para_seleccionar_cluster_3
if(variable_2_anexa_para_seleccionar_cluster_3 > variable_3_anexa_para_seleccionar_cluster_3){
variable_3_anexa_para_seleccionar_cluster_3 = variable_2_anexa_para_seleccionar_cluster_3
variable_4_anexa_para_seleccionar_cluster_3 = k_silueta_3
}
variable_1_anexa_para_seleccionar_cluster_3= 0
contador_anexa_para_seleccionar_cluster_3=0
variable_2_anexa_para_seleccionar_cluster_3=0
}
dataframe_playlist= data_actualizada[data_iteracion_3$clus_iteracion_3 == variable_4_anexa_para_seleccionar_cluster_3,]
dataframe_playlist=dataframe_playlist[,c(1,12,13)]
variable_4_anexa_para_seleccionar_cluster_3
sample_index_playlist <- sample(1:nrow(dataframe_playlist),dim(dataframe_playlist), replace = F)
dataframe_playlist$duration_ms=dataframe_playlist$duration_ms*0.001/60
contador_de_tiempo=0
playlist_semi_final=NULL
playlist_semi_final= data.frame('artista','cancion','index')
for (k_playlist in 1:dim(dataframe_playlist)){
variable_auxiliar_playlist=sample_index_playlist[k_playlist]
playlist_semi_final[k_playlist,1]=dataframe_playlist[variable_auxiliar_playlist,1]
playlist_semi_final[k_playlist,2]=dataframe_playlist[variable_auxiliar_playlist,3]
playlist_semi_final[k_playlist,3]=k_playlist
contador_de_tiempo=contador_de_tiempo+dataframe_playlist$duration_ms[variable_auxiliar_playlist]
if(contador_de_tiempo >= 180){
break
}
}
sample_index_cancion <- sample(1:nrow(playlist_semi_final),1, replace = F)
playlist_semi_final[sample_index_cancion,]
playlist_final = playlist_semi_final[!(playlist_semi_final$X.index. == sample_index_cancion),]
playlist_final$X.index.=NULL
playlist_final
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cluster)
library(factoextra)
library(janitor)
library(lattice)
library(stats4)
library(flexclust)
library(ggdendro)
library(knitr)
setwd("C:/Users/Felipe/Documents/GitHub/Entregas_mineria_de_datos/Proyecto 2")
load(file="beats.RData")
summary(beats)
beats=beats[,c(1,8:9,11,13:18,19,23,27,33)]
set.seed(2000000)
sample_index <- sample(1:nrow(beats),20000, replace = F)
sample_data = beats[sample_index,]
summary(sample_data)
sample_data[sample_data == ""] <- NA
sample_data %>%  summarise_all(funs(sum(is.na(.))))
data_lista = sample_data[!duplicated(sample_data$track_id),]
data_actualizada=data_lista
var_a_utilizar_en_clusters = data_lista[,c(2:10)]
data_escalada_1=scale(var_a_utilizar_en_clusters) %>% as_tibble()
summary(data_escalada_1)
vector_codo_1 <- numeric(30)
for(k_codo_iteracion_1 in 1:30){
modelo_codo_1 <- kmeans(data_escalada_1, centers = k_codo_iteracion_1)
vector_codo_1[k_codo_iteracion_1] <- modelo_codo_1$tot.withinss
}
plot(vector_codo_1)
vector_silueta_1=numeric(20)
Buffer_1 = 0
for (k_silueta_iteracion_1 in 2:20){
modelo_silueta_1 <- kmeans(data_escalada_1, centers = k_silueta_iteracion_1)
variable_temporal_1 <- silhouette(modelo_silueta_1$cluster,dist(data_escalada_1))
vector_silueta_1[k_silueta_iteracion_1] <- mean(variable_temporal_1[,3])
if(vector_silueta_1[k_silueta_iteracion_1]>= Buffer_1){
Buffer_1 = vector_silueta_1[k_silueta_iteracion_1]
elección_k_iteracion_1 = k_silueta_iteracion_1
}
}
tempDF_1=data.frame(CS=vector_silueta_1,K=c(1:20))
ggplot(tempDF_1, aes(x=K, y=CS)) + geom_line() + scale_x_continuous(breaks=c(1:30))
modelo_k_means_1 <- kmeans(data_escalada_1, centers = elección_k_iteracion_1)
data_escalada_1$clus_iteracion_1 <- modelo_k_means_1$cluster %>% as.factor()
data_actualizada$clus_iteracion_1 <- modelo_k_means_1$cluster %>% as.factor()
ggplot(data_escalada_1, aes(energy,danceability, color=clus_iteracion_1 )) +  geom_point(alpha=0.5, show.legend = F) +  theme_bw()
Hopkins_1 <- get_clust_tendency(var_a_utilizar_en_clusters, n = 20, graph = FALSE)
Hopkins_1
data_escalada_1 <- apply(data_escalada_1,2,as.numeric)
modelo_k_means_1$tot.withinss
meanData_1 <- colMeans(data_escalada_1)
SSB_1 <- numeric(elección_k_iteracion_1) #Este valor y el que esta en el for DEPENDEN DE LA CANTIDAD DE CLUSTERS QUE DETERMINA EL MODELO.
for (i_1 in 1:elección_k_iteracion_1){
tempData_1 <- data_escalada_1[which(modelo_k_means_1$cluster==i_1),]
SSB_1[i_1] <- nrow(tempData_1)*sum((meanData_1-colMeans(tempData_1))^2)
}
separation_1 = sum(SSB_1)
separation_1
coefSilueta_1 <- silhouette(modelo_k_means_1$cluster,dist(data_escalada_1))
summary(coefSilueta_1)
fviz_silhouette(coefSilueta_1) + coord_flip()
variable_1_anexa_para_seleccionar_cluster_1= 0
contador_anexa_para_seleccionar_cluster_1=0
variable_2_anexa_para_seleccionar_cluster_1=0
variable_3_anexa_para_seleccionar_cluster_1=0
variable_4_anexa_para_seleccionar_cluster_1=0
for(k_silueta_1 in 1:elección_k_iteracion_1){
for (i_silueta_1 in 1:length(coefSilueta_1[,1]) ){
if(coefSilueta_1[i_silueta_1,1]== k_silueta_1){
variable_1_anexa_para_seleccionar_cluster_1=variable_1_anexa_para_seleccionar_cluster_1+coefSilueta_1[i_silueta_1,3]
contador_anexa_para_seleccionar_cluster_1=contador_anexa_para_seleccionar_cluster_1+1
}
}
variable_2_anexa_para_seleccionar_cluster_1=variable_1_anexa_para_seleccionar_cluster_1/contador_anexa_para_seleccionar_cluster_1
if(variable_2_anexa_para_seleccionar_cluster_1 > variable_3_anexa_para_seleccionar_cluster_1){
variable_3_anexa_para_seleccionar_cluster_1 = variable_2_anexa_para_seleccionar_cluster_1
variable_4_anexa_para_seleccionar_cluster_1 = k_silueta_1
}
variable_1_anexa_para_seleccionar_cluster_1= 0
contador_anexa_para_seleccionar_cluster_1=0
variable_2_anexa_para_seleccionar_cluster_1=0
}
data_iteracion_2= data_actualizada[data_actualizada$clus_iteracion_1 == variable_4_anexa_para_seleccionar_cluster_1,]
data_actualizada= data_actualizada[data_actualizada$clus_iteracion_1 == variable_4_anexa_para_seleccionar_cluster_1,]
variable_4_anexa_para_seleccionar_cluster_1
data_escalada_2=data_iteracion_2[,c(2:10)]
data_escalada_2=scale(data_escalada_2) %>% as_tibble()
summary(data_escalada_2)
vector_codo_2 <- numeric(30)
for(k_codo_iteracion_2 in 1:30){
modelo_codo_2 <- kmeans(data_escalada_2, centers = k_codo_iteracion_2)
vector_codo_2[k_codo_iteracion_2] <- modelo_codo_2$tot.withinss
}
plot(vector_codo_2)
vector_silueta_2=numeric(20)
Buffer_2 = 0
for (k_silueta_iteracion_2 in 2:20){
modelo_silueta_2 <- kmeans(data_escalada_2, centers = k_silueta_iteracion_2)
variable_temporal_2 <- silhouette(modelo_silueta_2$cluster,dist(data_escalada_2))
vector_silueta_2[k_silueta_iteracion_2] <- mean(variable_temporal_2[,3])
if(vector_silueta_2[k_silueta_iteracion_2]>= Buffer_2){
Buffer_2 = vector_silueta_2[k_silueta_iteracion_2]
elección_k_iteracion_2 = k_silueta_iteracion_2
}
}
tempDF_2=data.frame(CS=vector_silueta_2,K=c(1:20))
ggplot(tempDF_2, aes(x=K, y=CS)) + geom_line() + scale_x_continuous(breaks=c(1:30))
modelo_k_means_2 <- kmeans(data_escalada_2, centers = elección_k_iteracion_2)
data_escalada_2$clus_iteracion_2 <- modelo_k_means_2$cluster %>% as.factor()
#Esto agrega el valor de la segunda iteracion
data_iteracion_2$clus_iteracion_2 <- modelo_k_means_2$cluster %>% as.factor() #dudo si eso esta bien
data_actualizada$clus_iteracion_2 <- modelo_k_means_2$cluster %>% as.factor()
ggplot(data_escalada_2, aes(energy,danceability, color=clus_iteracion_2 )) +  geom_point(alpha=0.5, show.legend = F) +  theme_bw()
Hopkins_2 <- get_clust_tendency(var_a_utilizar_en_clusters, n = 20, graph = FALSE)
Hopkins_2
data_escalada_2 <- apply(data_escalada_2,2,as.numeric)
modelo_k_means_2$tot.withinss
meanData_2 <- colMeans(data_escalada_2)
SSB_2 <- numeric(elección_k_iteracion_2) #Este valor y el que esta en el for DEPENDEN DE LA CANTIDAD DE CLUSTERS QUE DETERMINA EL MODELO.
for (i_2 in 1:elección_k_iteracion_2){
tempData_2 <- data_escalada_2[which(modelo_k_means_2$cluster==i_2),]
SSB_1[i_2] <- nrow(tempData_2)*sum((meanData_2-colMeans(tempData_2))^2)
}
separation_2 = sum(SSB_2)
separation_2
coefSilueta_2 <- silhouette(modelo_k_means_2$cluster,dist(data_escalada_2))
summary(coefSilueta_2)
fviz_silhouette(coefSilueta_2) + coord_flip()
variable_1_anexa_para_seleccionar_cluster_2= 0
contador_anexa_para_seleccionar_cluster_2=0
variable_2_anexa_para_seleccionar_cluster_2=0
variable_3_anexa_para_seleccionar_cluster_2=0
variable_4_anexa_para_seleccionar_cluster_2=0
for(k_silueta_2 in 1:elección_k_iteracion_2){
for (i_silueta_2 in 1:length(coefSilueta_2[,1]) ){
if(coefSilueta_2[i_silueta_2,1]== k_silueta_2){
variable_1_anexa_para_seleccionar_cluster_2=variable_1_anexa_para_seleccionar_cluster_2+coefSilueta_2[i_silueta_2,3]
contador_anexa_para_seleccionar_cluster_2=contador_anexa_para_seleccionar_cluster_2+1
}
}
variable_2_anexa_para_seleccionar_cluster_2=variable_1_anexa_para_seleccionar_cluster_2/contador_anexa_para_seleccionar_cluster_2
if(variable_2_anexa_para_seleccionar_cluster_2 > variable_3_anexa_para_seleccionar_cluster_2){
variable_3_anexa_para_seleccionar_cluster_2 = variable_2_anexa_para_seleccionar_cluster_2
variable_4_anexa_para_seleccionar_cluster_2 = k_silueta_2
}
variable_1_anexa_para_seleccionar_cluster_2= 0
contador_anexa_para_seleccionar_cluster_2=0
variable_2_anexa_para_seleccionar_cluster_2=0
}
data_iteracion_3= data_actualizada[data_actualizada$clus_iteracion_2 == variable_4_anexa_para_seleccionar_cluster_2,]
data_actualizada= data_actualizada[data_actualizada$clus_iteracion_2 == variable_4_anexa_para_seleccionar_cluster_2,]
variable_4_anexa_para_seleccionar_cluster_2
data_escalada_3=data_iteracion_3[,c(2:10)]
data_escalada_3=scale(data_escalada_3) %>% as_tibble()
summary(data_escalada_3)
vector_codo_3 <- numeric(30)
for(k_codo_iteracion_3 in 1:30){
modelo_codo_3 <- kmeans(data_escalada_3, centers = k_codo_iteracion_3)
vector_codo_3[k_codo_iteracion_3] <- modelo_codo_3$tot.withinss
}
plot(vector_codo_3)
vector_silueta_3=numeric(20)
Buffer_3 = 0
for (k_silueta_iteracion_3 in 2:20){
modelo_silueta_3 <- kmeans(data_escalada_3, centers = k_silueta_iteracion_3)
variable_temporal_3 <- silhouette(modelo_silueta_3$cluster,dist(data_escalada_3))
vector_silueta_3[k_silueta_iteracion_3] <- mean(variable_temporal_3[,3])
if(vector_silueta_3[k_silueta_iteracion_3]>= Buffer_3){
Buffer_3 = vector_silueta_3[k_silueta_iteracion_3]
elección_k_iteracion_3 = k_silueta_iteracion_3
}
}
tempDF_3=data.frame(CS=vector_silueta_3,K=c(1:20))
ggplot(tempDF_3, aes(x=K, y=CS)) + geom_line() + scale_x_continuous(breaks=c(1:30))
modelo_k_means_3 <- kmeans(data_escalada_3, centers = elección_k_iteracion_3)
data_escalada_3$clus_iteracion_3 <- modelo_k_means_3$cluster %>% as.factor()
data_iteracion_3$clus_iteracion_3 <- modelo_k_means_3$cluster %>% as.factor()
data_actualizada$clus_iteracion_3 <- modelo_k_means_3$cluster %>% as.factor()
ggplot(data_escalada_3, aes(energy,danceability, color=clus_iteracion_3 )) +  geom_point(alpha=0.5, show.legend = F) +  theme_bw()
Hopkins_3 <- get_clust_tendency(var_a_utilizar_en_clusters, n = 20, graph = FALSE)
Hopkins_3
data_escalada_3 <- apply(data_escalada_3,2,as.numeric)
modelo_k_means_3$tot.withinss
meanData_3 <- colMeans(data_escalada_3)
SSB_3 <- numeric(elección_k_iteracion_3) #Este valor y el que esta en el for DEPENDEN DE LA CANTIDAD DE CLUSTERS QUE DETERMINA EL MODELO.
for (i_3 in 1:elección_k_iteracion_3){
tempData_3 <- data_escalada_3[which(modelo_k_means_3$cluster==i_3),]
SSB_1[i_3] <- nrow(tempData_3)*sum((meanData_3-colMeans(tempData_3))^2)
}
separation_3 = sum(SSB_3)
separation_3
coefSilueta_3 <- silhouette(modelo_k_means_3$cluster,dist(data_escalada_3))
summary(coefSilueta_3)
fviz_silhouette(coefSilueta_3) + coord_flip()
variable_1_anexa_para_seleccionar_cluster_3= 0
contador_anexa_para_seleccionar_cluster_3=0
variable_2_anexa_para_seleccionar_cluster_3=0
variable_3_anexa_para_seleccionar_cluster_3=0
variable_4_anexa_para_seleccionar_cluster_3=0
for(k_silueta_3 in 1:elección_k_iteracion_3){
for (i_silueta_3 in 1:length(coefSilueta_3[,1]) ){
if(coefSilueta_3[i_silueta_3,1]== k_silueta_3){
variable_1_anexa_para_seleccionar_cluster_3=variable_1_anexa_para_seleccionar_cluster_3+coefSilueta_3[i_silueta_3,3]
contador_anexa_para_seleccionar_cluster_3=contador_anexa_para_seleccionar_cluster_3+1
}
}
variable_2_anexa_para_seleccionar_cluster_3=variable_1_anexa_para_seleccionar_cluster_3/contador_anexa_para_seleccionar_cluster_3
if(variable_2_anexa_para_seleccionar_cluster_3 > variable_3_anexa_para_seleccionar_cluster_3){
variable_3_anexa_para_seleccionar_cluster_3 = variable_2_anexa_para_seleccionar_cluster_3
variable_4_anexa_para_seleccionar_cluster_3 = k_silueta_3
}
variable_1_anexa_para_seleccionar_cluster_3= 0
contador_anexa_para_seleccionar_cluster_3=0
variable_2_anexa_para_seleccionar_cluster_3=0
}
dataframe_playlist= data_actualizada[data_iteracion_3$clus_iteracion_3 == variable_4_anexa_para_seleccionar_cluster_3,]
dataframe_playlist=dataframe_playlist[,c(1,12,13)]
variable_4_anexa_para_seleccionar_cluster_3
sample_index_playlist <- sample(1:nrow(dataframe_playlist),dim(dataframe_playlist), replace = F)
dataframe_playlist$duration_ms=dataframe_playlist$duration_ms*0.001/60
contador_de_tiempo=0
playlist_semi_final=NULL
playlist_semi_final= data.frame('artista','cancion','index')
for (k_playlist in 1:dim(dataframe_playlist)){
variable_auxiliar_playlist=sample_index_playlist[k_playlist]
playlist_semi_final[k_playlist,1]=dataframe_playlist[variable_auxiliar_playlist,1]
playlist_semi_final[k_playlist,2]=dataframe_playlist[variable_auxiliar_playlist,3]
playlist_semi_final[k_playlist,3]=k_playlist
contador_de_tiempo=contador_de_tiempo+dataframe_playlist$duration_ms[variable_auxiliar_playlist]
if(contador_de_tiempo >= 180){
break
}
}
sample_index_cancion <- sample(1:nrow(playlist_semi_final),1, replace = F)
playlist_semi_final[sample_index_cancion,]
playlist_final = playlist_semi_final[!(playlist_semi_final$X.index. == sample_index_cancion),]
playlist_final$X.index.=NULL
playlist_final
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cluster)
library(factoextra)
library(janitor)
library(lattice)
library(stats4)
library(flexclust)
library(ggdendro)
library(knitr)
setwd("C:/Users/Felipe/Documents/GitHub/Entregas_mineria_de_datos/Proyecto 2")
load(file="beats.RData")
summary(beats)
beats=beats[,c(1,8:9,11,13:18,19,23,27,33)]
set.seed(2000000)
sample_index <- sample(1:nrow(beats),20000, replace = F)
sample_data = beats[sample_index,]
summary(sample_data)
sample_data[sample_data == ""] <- NA
sample_data %>%  summarise_all(funs(sum(is.na(.))))
data_lista = sample_data[!duplicated(sample_data$track_id),]
data_actualizada=data_lista
var_a_utilizar_en_clusters = data_lista[,c(2:10)]
data_escalada_1=scale(var_a_utilizar_en_clusters) %>% as_tibble()
summary(data_escalada_1)
vector_codo_1 <- numeric(30)
for(k_codo_iteracion_1 in 1:30){
modelo_codo_1 <- kmeans(data_escalada_1, centers = k_codo_iteracion_1)
vector_codo_1[k_codo_iteracion_1] <- modelo_codo_1$tot.withinss
}
plot(vector_codo_1)
vector_silueta_1=numeric(20)
Buffer_1 = 0
for (k_silueta_iteracion_1 in 2:20){
modelo_silueta_1 <- kmeans(data_escalada_1, centers = k_silueta_iteracion_1)
variable_temporal_1 <- silhouette(modelo_silueta_1$cluster,dist(data_escalada_1))
vector_silueta_1[k_silueta_iteracion_1] <- mean(variable_temporal_1[,3])
if(vector_silueta_1[k_silueta_iteracion_1]>= Buffer_1){
Buffer_1 = vector_silueta_1[k_silueta_iteracion_1]
elección_k_iteracion_1 = k_silueta_iteracion_1
}
}
tempDF_1=data.frame(CS=vector_silueta_1,K=c(1:20))
ggplot(tempDF_1, aes(x=K, y=CS)) + geom_line() + scale_x_continuous(breaks=c(1:30))
modelo_k_means_1 <- kmeans(data_escalada_1, centers = elección_k_iteracion_1)
data_escalada_1$clus_iteracion_1 <- modelo_k_means_1$cluster %>% as.factor()
data_actualizada$clus_iteracion_1 <- modelo_k_means_1$cluster %>% as.factor()
ggplot(data_escalada_1, aes(energy,danceability, color=clus_iteracion_1 )) +  geom_point(alpha=0.5, show.legend = F) +  theme_bw()
Hopkins_1 <- get_clust_tendency(var_a_utilizar_en_clusters, n = 20, graph = FALSE)
Hopkins_1
data_escalada_1 <- apply(data_escalada_1,2,as.numeric)
modelo_k_means_1$tot.withinss
meanData_1 <- colMeans(data_escalada_1)
SSB_1 <- numeric(elección_k_iteracion_1) #Este valor y el que esta en el for DEPENDEN DE LA CANTIDAD DE CLUSTERS QUE DETERMINA EL MODELO.
for (i_1 in 1:elección_k_iteracion_1){
tempData_1 <- data_escalada_1[which(modelo_k_means_1$cluster==i_1),]
SSB_1[i_1] <- nrow(tempData_1)*sum((meanData_1-colMeans(tempData_1))^2)
}
separation_1 = sum(SSB_1)
separation_1
coefSilueta_1 <- silhouette(modelo_k_means_1$cluster,dist(data_escalada_1))
summary(coefSilueta_1)
fviz_silhouette(coefSilueta_1) + coord_flip()
variable_1_anexa_para_seleccionar_cluster_1= 0
contador_anexa_para_seleccionar_cluster_1=0
variable_2_anexa_para_seleccionar_cluster_1=0
variable_3_anexa_para_seleccionar_cluster_1=0
variable_4_anexa_para_seleccionar_cluster_1=0
for(k_silueta_1 in 1:elección_k_iteracion_1){
for (i_silueta_1 in 1:length(coefSilueta_1[,1]) ){
if(coefSilueta_1[i_silueta_1,1]== k_silueta_1){
variable_1_anexa_para_seleccionar_cluster_1=variable_1_anexa_para_seleccionar_cluster_1+coefSilueta_1[i_silueta_1,3]
contador_anexa_para_seleccionar_cluster_1=contador_anexa_para_seleccionar_cluster_1+1
}
}
variable_2_anexa_para_seleccionar_cluster_1=variable_1_anexa_para_seleccionar_cluster_1/contador_anexa_para_seleccionar_cluster_1
if(variable_2_anexa_para_seleccionar_cluster_1 > variable_3_anexa_para_seleccionar_cluster_1){
variable_3_anexa_para_seleccionar_cluster_1 = variable_2_anexa_para_seleccionar_cluster_1
variable_4_anexa_para_seleccionar_cluster_1 = k_silueta_1
}
variable_1_anexa_para_seleccionar_cluster_1= 0
contador_anexa_para_seleccionar_cluster_1=0
variable_2_anexa_para_seleccionar_cluster_1=0
}
data_iteracion_2= data_actualizada[data_actualizada$clus_iteracion_1 == variable_4_anexa_para_seleccionar_cluster_1,]
data_actualizada= data_actualizada[data_actualizada$clus_iteracion_1 == variable_4_anexa_para_seleccionar_cluster_1,]
variable_4_anexa_para_seleccionar_cluster_1
data_escalada_2=data_iteracion_2[,c(2:10)]
data_escalada_2=scale(data_escalada_2) %>% as_tibble()
summary(data_escalada_2)
vector_codo_2 <- numeric(30)
for(k_codo_iteracion_2 in 1:30){
modelo_codo_2 <- kmeans(data_escalada_2, centers = k_codo_iteracion_2)
vector_codo_2[k_codo_iteracion_2] <- modelo_codo_2$tot.withinss
}
plot(vector_codo_2)
vector_silueta_2=numeric(20)
Buffer_2 = 0
for (k_silueta_iteracion_2 in 2:20){
modelo_silueta_2 <- kmeans(data_escalada_2, centers = k_silueta_iteracion_2)
variable_temporal_2 <- silhouette(modelo_silueta_2$cluster,dist(data_escalada_2))
vector_silueta_2[k_silueta_iteracion_2] <- mean(variable_temporal_2[,3])
if(vector_silueta_2[k_silueta_iteracion_2]>= Buffer_2){
Buffer_2 = vector_silueta_2[k_silueta_iteracion_2]
elección_k_iteracion_2 = k_silueta_iteracion_2
}
}
tempDF_2=data.frame(CS=vector_silueta_2,K=c(1:20))
ggplot(tempDF_2, aes(x=K, y=CS)) + geom_line() + scale_x_continuous(breaks=c(1:30))
modelo_k_means_2 <- kmeans(data_escalada_2, centers = elección_k_iteracion_2)
data_escalada_2$clus_iteracion_2 <- modelo_k_means_2$cluster %>% as.factor()
#Esto agrega el valor de la segunda iteracion
data_iteracion_2$clus_iteracion_2 <- modelo_k_means_2$cluster %>% as.factor() #dudo si eso esta bien
data_actualizada$clus_iteracion_2 <- modelo_k_means_2$cluster %>% as.factor()
ggplot(data_escalada_2, aes(energy,danceability, color=clus_iteracion_2 )) +  geom_point(alpha=0.5, show.legend = F) +  theme_bw()
Hopkins_2 <- get_clust_tendency(var_a_utilizar_en_clusters, n = 20, graph = FALSE)
Hopkins_2
data_escalada_2 <- apply(data_escalada_2,2,as.numeric)
modelo_k_means_2$tot.withinss
meanData_2 <- colMeans(data_escalada_2)
SSB_2 <- numeric(elección_k_iteracion_2) #Este valor y el que esta en el for DEPENDEN DE LA CANTIDAD DE CLUSTERS QUE DETERMINA EL MODELO.
for (i_2 in 1:elección_k_iteracion_2){
tempData_2 <- data_escalada_2[which(modelo_k_means_2$cluster==i_2),]
SSB_1[i_2] <- nrow(tempData_2)*sum((meanData_2-colMeans(tempData_2))^2)
}
separation_2 = sum(SSB_2)
separation_2
coefSilueta_2 <- silhouette(modelo_k_means_2$cluster,dist(data_escalada_2))
summary(coefSilueta_2)
fviz_silhouette(coefSilueta_2) + coord_flip()
variable_1_anexa_para_seleccionar_cluster_2= 0
contador_anexa_para_seleccionar_cluster_2=0
variable_2_anexa_para_seleccionar_cluster_2=0
variable_3_anexa_para_seleccionar_cluster_2=0
variable_4_anexa_para_seleccionar_cluster_2=0
for(k_silueta_2 in 1:elección_k_iteracion_2){
for (i_silueta_2 in 1:length(coefSilueta_2[,1]) ){
if(coefSilueta_2[i_silueta_2,1]== k_silueta_2){
variable_1_anexa_para_seleccionar_cluster_2=variable_1_anexa_para_seleccionar_cluster_2+coefSilueta_2[i_silueta_2,3]
contador_anexa_para_seleccionar_cluster_2=contador_anexa_para_seleccionar_cluster_2+1
}
}
variable_2_anexa_para_seleccionar_cluster_2=variable_1_anexa_para_seleccionar_cluster_2/contador_anexa_para_seleccionar_cluster_2
if(variable_2_anexa_para_seleccionar_cluster_2 > variable_3_anexa_para_seleccionar_cluster_2){
variable_3_anexa_para_seleccionar_cluster_2 = variable_2_anexa_para_seleccionar_cluster_2
variable_4_anexa_para_seleccionar_cluster_2 = k_silueta_2
}
variable_1_anexa_para_seleccionar_cluster_2= 0
contador_anexa_para_seleccionar_cluster_2=0
variable_2_anexa_para_seleccionar_cluster_2=0
}
data_iteracion_3= data_actualizada[data_actualizada$clus_iteracion_2 == variable_4_anexa_para_seleccionar_cluster_2,]
data_actualizada= data_actualizada[data_actualizada$clus_iteracion_2 == variable_4_anexa_para_seleccionar_cluster_2,]
variable_4_anexa_para_seleccionar_cluster_2
data_escalada_3=data_iteracion_3[,c(2:10)]
data_escalada_3=scale(data_escalada_3) %>% as_tibble()
summary(data_escalada_3)
vector_codo_3 <- numeric(30)
for(k_codo_iteracion_3 in 1:30){
modelo_codo_3 <- kmeans(data_escalada_3, centers = k_codo_iteracion_3)
vector_codo_3[k_codo_iteracion_3] <- modelo_codo_3$tot.withinss
}
plot(vector_codo_3)
vector_silueta_3=numeric(20)
Buffer_3 = 0
for (k_silueta_iteracion_3 in 2:20){
modelo_silueta_3 <- kmeans(data_escalada_3, centers = k_silueta_iteracion_3)
variable_temporal_3 <- silhouette(modelo_silueta_3$cluster,dist(data_escalada_3))
vector_silueta_3[k_silueta_iteracion_3] <- mean(variable_temporal_3[,3])
if(vector_silueta_3[k_silueta_iteracion_3]>= Buffer_3){
Buffer_3 = vector_silueta_3[k_silueta_iteracion_3]
elección_k_iteracion_3 = k_silueta_iteracion_3
}
}
tempDF_3=data.frame(CS=vector_silueta_3,K=c(1:20))
ggplot(tempDF_3, aes(x=K, y=CS)) + geom_line() + scale_x_continuous(breaks=c(1:30))
modelo_k_means_3 <- kmeans(data_escalada_3, centers = elección_k_iteracion_3)
data_escalada_3$clus_iteracion_3 <- modelo_k_means_3$cluster %>% as.factor()
data_iteracion_3$clus_iteracion_3 <- modelo_k_means_3$cluster %>% as.factor()
data_actualizada$clus_iteracion_3 <- modelo_k_means_3$cluster %>% as.factor()
ggplot(data_escalada_3, aes(energy,danceability, color=clus_iteracion_3 )) +  geom_point(alpha=0.5, show.legend = F) +  theme_bw()
Hopkins_3 <- get_clust_tendency(var_a_utilizar_en_clusters, n = 20, graph = FALSE)
Hopkins_3
data_escalada_3 <- apply(data_escalada_3,2,as.numeric)
modelo_k_means_3$tot.withinss
meanData_3 <- colMeans(data_escalada_3)
SSB_3 <- numeric(elección_k_iteracion_3) #Este valor y el que esta en el for DEPENDEN DE LA CANTIDAD DE CLUSTERS QUE DETERMINA EL MODELO.
for (i_3 in 1:elección_k_iteracion_3){
tempData_3 <- data_escalada_3[which(modelo_k_means_3$cluster==i_3),]
SSB_1[i_3] <- nrow(tempData_3)*sum((meanData_3-colMeans(tempData_3))^2)
}
separation_3 = sum(SSB_3)
separation_3
coefSilueta_3 <- silhouette(modelo_k_means_3$cluster,dist(data_escalada_3))
summary(coefSilueta_3)
fviz_silhouette(coefSilueta_3) + coord_flip()
variable_1_anexa_para_seleccionar_cluster_3= 0
contador_anexa_para_seleccionar_cluster_3=0
variable_2_anexa_para_seleccionar_cluster_3=0
variable_3_anexa_para_seleccionar_cluster_3=0
variable_4_anexa_para_seleccionar_cluster_3=0
for(k_silueta_3 in 1:elección_k_iteracion_3){
for (i_silueta_3 in 1:length(coefSilueta_3[,1]) ){
if(coefSilueta_3[i_silueta_3,1]== k_silueta_3){
variable_1_anexa_para_seleccionar_cluster_3=variable_1_anexa_para_seleccionar_cluster_3+coefSilueta_3[i_silueta_3,3]
contador_anexa_para_seleccionar_cluster_3=contador_anexa_para_seleccionar_cluster_3+1
}
}
variable_2_anexa_para_seleccionar_cluster_3=variable_1_anexa_para_seleccionar_cluster_3/contador_anexa_para_seleccionar_cluster_3
if(variable_2_anexa_para_seleccionar_cluster_3 > variable_3_anexa_para_seleccionar_cluster_3){
variable_3_anexa_para_seleccionar_cluster_3 = variable_2_anexa_para_seleccionar_cluster_3
variable_4_anexa_para_seleccionar_cluster_3 = k_silueta_3
}
variable_1_anexa_para_seleccionar_cluster_3= 0
contador_anexa_para_seleccionar_cluster_3=0
variable_2_anexa_para_seleccionar_cluster_3=0
}
dataframe_playlist= data_actualizada[data_iteracion_3$clus_iteracion_3 == variable_4_anexa_para_seleccionar_cluster_3,]
dataframe_playlist=dataframe_playlist[,c(1,12,13)]
variable_4_anexa_para_seleccionar_cluster_3
sample_index_playlist <- sample(1:nrow(dataframe_playlist),dim(dataframe_playlist), replace = F)
dataframe_playlist$duration_ms=dataframe_playlist$duration_ms*0.001/60
contador_de_tiempo=0
playlist_semi_final=NULL
playlist_semi_final= data.frame('artista','cancion','index')
for (k_playlist in 1:dim(dataframe_playlist)){
variable_auxiliar_playlist=sample_index_playlist[k_playlist]
playlist_semi_final[k_playlist,1]=dataframe_playlist[variable_auxiliar_playlist,1]
playlist_semi_final[k_playlist,2]=dataframe_playlist[variable_auxiliar_playlist,3]
playlist_semi_final[k_playlist,3]=k_playlist
contador_de_tiempo=contador_de_tiempo+dataframe_playlist$duration_ms[variable_auxiliar_playlist]
if(contador_de_tiempo >= 180){
break
}
}
sample_index_cancion <- sample(1:nrow(playlist_semi_final),1, replace = F)
playlist_semi_final[sample_index_cancion,]
playlist_final = playlist_semi_final[!(playlist_semi_final$X.index. == sample_index_cancion),]
playlist_final$X.index.=NULL
playlist_final
